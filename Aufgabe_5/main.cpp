/* * Aufgabe 5 - Biggest Product * Michel Kugler - 2.09.2017 * * In dieser Aufgabe soll eine Methode implementiert werden, welche als Paramter * einen Array mit Integer Werten enthält. Aus diesem Array soll nun das grösste * Produkt gefunden werden, welches mit 3 Elementen aus diesem Array erstellt * werden kann. * * class ArrayUtil { * public: * static int highestProduct(int *values, const int ARRAY_SIZE); * }; */#include <iostream>#include <ctime>#include "../myFunctions/functions.h"using namespace std;class ArrayUtil {public:    static int highestProduct(int *values, const int ARRAY_SIZE);};int ArrayUtil::highestProduct(int *values, const int ARRAY_SIZE) {    // Size of the Array when it has to be dynamic    const int toMultiplyHighest = 3;    // result :D    int result = 1;    // Flag, if an index has come once before    bool doIt = true;    // For the 3 Highest Numbers & index Array if index come once to prevent do count this twice    int *highest = new int[toMultiplyHighest];    int *doNot = new int [toMultiplyHighest];    // Fill arrays    for (int i = 0; i < toMultiplyHighest; ++i) {        highest[i] = values[0];        doNot[i] = -1;    }    /**     * First  : Loop all highest     * Second : Loop to loop the input array     * Third  : Loop the doNot ray filled with indexes     */    for (int j = 0; j < toMultiplyHighest; ++j) {        for (int i = 0; i < ARRAY_SIZE; ++i) {            for(int k = 0; k < toMultiplyHighest; ++k) {                doIt = i == doNot[k];            }            if((values[i] > highest[j]) && !doIt){                highest[j] = values[i];                doNot[j] = i;            }        }    }    //print_r(highest, toMultiplyHighest);    for (int i = 0; i < toMultiplyHighest; ++i) {        result *= highest[i];    }    delete [] highest;    delete [] doNot;    return result;};int main() {    // 1730 - 900 = Minutes per day    const int SIZE = 100000;    int stockValues[SIZE];    // Fill the Array with random numbers between 1000-500    fillThisArray(stockValues, SIZE, 20, 2);    // To print the Array    //print_r(stockValues, SIZE);    clock_t start, stop;    start = clock();    cout << "Result = " <<  ArrayUtil::highestProduct(stockValues, SIZE) << endl << endl;    stop = clock();    // Print the runtime. Needs only Start Value (stock value has Default clock() as value    print_runtime(start, stop, SIZE);    return 0;}